import { serverSideApolloClient } from "@/contexts/MyApolloProvider";
import { useAuth } from "@/hooks/useAuth";
import { GlobalHeader } from "@/layouts/GlobalHeader";
import { checkSafeInteger } from "@/lib/check-safe-integer";
import { formatToJP } from "@/lib/format-to-jp";
import { Post, Query } from "@/types/graphql";
import { gql } from "@apollo/client";
import { Avatar, Box, Group, Stack, Text } from "@mantine/core";
import Head from "next/head";
import Link from "next/link";
import { ReactElement } from "react";

const GET_POST_BY_ID_QUERY = gql`
  query getPostById($id: Int!) {
    postById(id: $id) {
      id
      title
      body
      createdAt
      updatedAt
      authorId
      userByAuthorId {
        name
      }
    }
  }
`;

const GET_ALL_POSTS_QUERY = gql`
  query getUserById {
    allPosts {
      edges {
        node {
          id
        }
      }
    }
  }
`;

const PostPage = ({ post, authorName }: { post: Post; authorName: string }) => {
  const { user } = useAuth();

  if (!post) {
    return null;
  }

  return (
    <>
      <Head>
        <title>gamelog</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box mx="md">
        <article className="max-w-3xl mt-24 mx-auto">
          <h1 className="break-all mb-2">{post.title}</h1>
          <Group align="center">
            <Avatar
              // transparentにしている分、余分な空白があるため、マイナスマージンを使用して調整
              mr={-10}
              variant="filled"
              color="transparent"
            />
            <Stack spacing={0}>
              <Text size="sm" className="break-all">
                {authorName}
              </Text>
              <Text size="sm" className="break-all">
                {formatToJP(post.createdAt, true)}
              </Text>
            </Stack>
            {user?.uid && post?.authorId && user?.uid === post.authorId && (
              <Link className="ml-auto" href={`/posts/${post.id}/edit`}>
                <Text
                  className="rounded-[4px] px-4 py-[0.55rem] text-sm font-bold text-center hover:opacity-80"
                  bg="blue"
                  color="white"
                >
                  編集
                </Text>
              </Link>
            )}
          </Group>

          <Text className="break-all mt-12">{post.body}</Text>
        </article>
      </Box>
    </>
  );
};

PostPage.getLayout = function getLayout(page: ReactElement) {
  return <GlobalHeader>{page}</GlobalHeader>;
};

export const getStaticProps = async ({
  params: { pid },
}: {
  params: { pid: string };
}) => {
  const id = parseInt(pid);
  if (!checkSafeInteger(id)) {
    return {
      notFound: true,
    };
  }

  const { data } = await serverSideApolloClient.query<Pick<Query, "postById">>({
    query: GET_POST_BY_ID_QUERY,
    variables: {
      id,
    },
    // next.jsのキャッシュを使うので、graphQLのキャッシュは無効化
    fetchPolicy: "no-cache",
  });

  if (!data.postById) {
    return {
      notFound: true,
    };
  }
  return {
    props: {
      post: data.postById,
      authorName: data.postById.userByAuthorId?.name ?? "",
    },
    revalidate: 60, // seconds
  };
};

export const getStaticPaths = async () => {
  const { data } = await serverSideApolloClient.query<Pick<Query, "allPosts">>({
    query: GET_ALL_POSTS_QUERY,
    // next.jsのキャッシュを使うので、graphQLのキャッシュは無効化
    fetchPolicy: "no-cache",
  });
  const ids = data?.allPosts?.edges.map((edge) => edge.node?.id) ?? [];
  return {
    paths: ids
      .filter((id): id is number => id !== undefined)
      .map((id) => ({ params: { pid: id.toString() } })),
    fallback: true,
  };
};

export default PostPage;
